using System;
using System.Data;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Common;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Oracle.ManagedDataAccess.Client;
using Microsoft.AspNetCore.Hosting;
using System.Collections.Generic;
using WebApplication1.Models;
using System.Collections;
using System.Net.Http;

namespace WebApplication1.Controllers.{ControllerName}
{
    public class {ControllerName}Controller : Controller
    {
        DBHelper data = new DBHelper();
        DataBaseContext context;
        private IHttpClientFactory httpClient;
        public {ControllerName}Controller(DataBaseContext context, IHttpClientFactory _httpClient)
        {
            this.context = context;
            this.httpClient = _httpClient;
        }

        [CheckCustomer]
        public IActionResult {ViewName}()
        {
            return View();
        }

        [CheckCustomer]
        public IActionResult {EditViewName}()
        {
            ViewBag.status = HttpContext.Request.Query["status"].ToString();
            ViewBag.{PK_LOWER} = ViewBag.status == "add" ? "" : HttpContext.Request.Query["Rowid"].ToString();
            return View();
        }

        #region 获取全部：分页
        [HttpGet]
        public async Task<IActionResult> GetList(string search_text, int page, int limit)
        {
            string sql= @"SELECT * FROM(SELECT ROWNUM AS rowno, r.* FROM(select (Select Count(*) From {TableName} where  {QueryColName} like '%'|| :search_text ||'%') totalPage,
{QueryCols}
                         from {TableName} where {QueryColName} like '%' || :search_text1  || '%') r
                                  where ROWNUM <= :page * :limit) table_alias
                          WHERE table_alias.rowno > (: page - 1) * :limit";
            OracleParameter[] sp = {data.MakeInParam(":search_text", search_text??""),
                                    data.MakeInParam(":search_text1", search_text??""),
                                     data.MakeInParam(":page", page),
                                    data.MakeInParam(":limit", limit)};
            DataSet ds = await data.GetDataSetByParam(sql, sp);
            if(ds.Tables[0].Rows.Count > 0)
			{
                return Json(new { code=0,msg="已查询到数据",count=ds.Tables[0].Rows[0]["totalPage"],data= ds.Tables[0] });
            }
            else
            {
                return Json(new { code = 1, msg = "未查询到数据", count = 0, data = new { } });
            }
        }
        #endregion

        #region 获取：根据ID查询
        [HttpGet]
        public async Task<IActionResult> GetById(string {PK_LOWER})
        {
            string sql=@"Select 
{QueryCols}
                     from {TableName} where {PK_LOWER} = :{PK_LOWER} ";
            OracleParameter[] sp = {data.MakeInParam(":{PK_LOWER}", {PK_LOWER} ??"")};
            DataSet ds = await data.GetDataSetByParam(sql, sp);
            if(ds.Tables[0].Rows.Count > 0)
			{
                return Json(new { code=0,msg="已查询到数据",count=ds.Tables[0].Rows.Count,data= ds.Tables[0] });
            }
            else
            {
                return Json(new { code = 1, msg = "未查询到数据", count = 0, data = new { } });
            }
        }
        #endregion

        #region 新增
        [HttpPost]
        public async Task<IActionResult> Insert({InsertParam})
        {
            string sql = @"insert into {TableName}(
{InserCol}
									  )
                                values(
{InserColValue}
									   ) ";
			string {PK_LOWER} = await data.GetString(@"select {TableName}_s.nextval from dual");
            OracleParameter[] sp = {
{InsertOracleParam}
			};
            bool flag = await data.DoSqlByParam(sql, sp);
            return flag ? Json(new { code = 200, msg = "保存成功" }) : Json(new { code = 300, msg = "保存失败，请联系管理员" });
        }
        #endregion

        #region 编辑
        [HttpPost]
        public async Task<IActionResult> Modify({UpdateParam})
        {
            string sql=@"Update {TableName} set 
{UpdateCol}
             where {PK_LOWER} = :{PK_LOWER} ";
            OracleParameter[] sp = {
{UpdateOracleParam}
			};
            bool flag = await data.DoSqlByParam(sql, sp);
            return flag ? Json(new { code = 200, msg = "保存成功" }) : Json(new { code = 300, msg = "保存失败，请联系管理员" });
        }
        #endregion

        #region 删除
        [HttpPost]
        public async Task<IActionResult> Delete(string[] {PK_LOWER})
        {
            Hashtable ht = new Hashtable();
            for (int i = 0; i < {PK_LOWER}.Length; i++)
            {
            ht.Add(@"delete from {TableName} where {PK_LOWER} =:{PK_LOWER}"+i,new OracleParameter[] { data.MakeInParam(":{PK_LOWER}"+i,{PK_LOWER}[i].ToString()??"")});
            }
            bool flag = await data.DoSqlList(ht);
            return flag ? Json(new { code = 200, msg = "删除成功" }) : Json(new { code = 300, msg = "删除失败，请联系管理员" });
        }
        #endregion

        #region 导出
        [HttpPost]
        public async Task<IActionResult> Export(string search_text)
        {
            string sql = @"select 
{QueryCols}
                                     from {TableName} where {QueryColName} like '%'|| :search_text || '%'";
            OracleParameter[] sp = { data.MakeInParam(":search_text", search_text ?? "") };
            DataSet ds = await data.GetDataSetByParam(sql, sp);
            IList<Excel{ViewName}Export> list = data.DataSetToIList1<Excel{ViewName}Export>(ds, 0);
            byte[] buffer = new byte[0];
            if (list == null)
            {
            }
            else
            {
                List<Excel{ViewName}Export> import = list.ToList();
                if (import == null) { }
                else
                {
                    buffer = ExcelHelper.Export(import, "数据导出", ExcelTitle.{ViewName}).GetBuffer();
                }
            }
            return File(buffer, "application/ms-excel", "数据导出(" + DateTime.Now + ").xls");
        }
        #endregion

        #region 导入
        [HttpPost]
        public async Task<IActionResult> FileUpload([FromForm]IFormFile file)
        {
            string Msg = "";
            string returnMsg = "";
            if (file.Length > 0)
            {
                long fileSize = file.Length / 5242880;
                if (fileSize > 15)
                {
                    Msg = "{\"code\":1,\"msg\":\"文件不能大于15M\",\"returnMsg\":\"\"}";
                }
                else
                {
                    string path = Startup.HostingEnvironment.WebRootPath + "\\" + Guid.NewGuid() + file.FileName;

                    using (var stream = new FileStream(path, FileMode.Create))
                    {
                        file.CopyTo(stream);
                    }
                    ExcelHelper excel = new ExcelHelper();
                    List<Excel{ViewName}Import> ec = excel.GetList<Excel{ViewName}Import>(path).ToList();
                    if (ec.Count > 0)
                    {
                        for (int i = 0; i < ec.Count; i++)
                        {
                            string {PK_LOWER} = await data.GetString(@"select {TableName}_s.nextval from dual");
                            string sql = @"insert into {TableName}(
{InserCol}
                                    )
                                values( 
{InserColValue}
								) ";
                            OracleParameter[] sp = {
{ImportOracleParam}
							};
                            bool flag = await data.DoSqlByParam(sql, sp);
                            if (flag)
                            {
                                returnMsg += "第" + i + "行：导入成功。";
                            }
                            else
                            {
                                returnMsg += "第" + i + "行：在导入数据时发生错误，请联系管理员。";
                            }
                        }
                        Msg = "{\"code\":0,\"msg\":\"执行完成\",\"returnMsg\":\"" + returnMsg + "\"}";
                    }
                    else
                    {
                        Msg = "{\"code\":1,\"msg\":\"Excel中没有数据\",\"returnMsg\":\"\"}";
                    }
                    //找到文件，删除
                    if (System.IO.File.Exists(path))
                    {
                        System.IO.File.Delete(path);
                    }
                }
            }
            return Content(Msg);
        }
        #endregion
	}
}